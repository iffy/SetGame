rectMode(CENTER);

var Card = function(num,shape,color,pattern) {
    this.x=55;
    this.y=40;
    this.l=100;
    this.h=70;
    this.num=num;
    this.shape=shape;
    this.color=color;
    this.pattern=pattern;
};

//all possible cards (81)
var deck=[];
 
for (var a=1; a<4; a++){
    for (var b=1; b<4; b++){
        for (var c=1; c<4; c++){
            for (var d=1; d<4; d++){
                deck.push(new Card(a,b,c,d));
            }
        }
    }
}     

//all cards randomized
var selected =[];

for (var k=0; k<81; k++){
    var pick=floor(random(deck.length));
    var cardpick=deck[pick];
    selected.push(cardpick);
    deck.splice(pick, 1);
}

//position of cards
var cardDisplay=1;

/*shape1 is circle. shape2 is square. shape3 is triangle.
pattern1 is blank. pattern2 is filled. pattern3 is dotted
color1 is red. color2 is green. color3 is purple
face up*/

Card.prototype.draw = function() {
    if (cardDisplay===1){
        this.x=55;
        this.y=40;
    }
    else if (cardDisplay===2){
        this.x=165;
        this.y=40;
    }
    else if (cardDisplay===3){
        this.x=275;
        this.y=40;
    }
    else if (cardDisplay===4){
        this.x=55;
        this.y=120;
    }
    else if (cardDisplay===5){
        this.x=165;
        this.y=120;
    }
    else if (cardDisplay===6){
        this.x=275;
        this.y=120;
    }
    else if (cardDisplay===7){
        this.x=55;
        this.y=200;
    }
    else if (cardDisplay===8){
        this.x=165;
        this.y=200;
    }
    else if (cardDisplay===9){
        this.x=275;
        this.y=200;
    }
    else if (cardDisplay===10){
        this.x=55;
        this.y=280;
    }
    else if (cardDisplay===11){
        this.x=165;
        this.y=280;
    }
    else if (cardDisplay===12){
        this.x=275;
        this.y=280;
    }
    else if (cardDisplay===13){
        this.x=55;
        this.y=360;
    }
    else if (cardDisplay===14){
        this.x=165;
        this.y=360;
    }
    else if (cardDisplay===15){
        this.x=275;
        this.y=360;
    }
    //background(255, 255, 255);
    fill(255, 255, 255);
    noFill();
    stroke(0, 0, 0);
    rect(this.x,this.y,this.l,this.h);
    var ellipseLength=(this.l+this.h)/9;
    var ellipseWidth=(this.l+this.h)/9;
    var rectLength=(this.l+this.h)/9;
    var rectWidth=(this.l+this.h)/9;
    var tx1=this.x-(this.l+this.h)/15;
    var ty1=this.y-(this.l+this.h)/25;
    var tx2=this.x+(this.l+this.h)/15;
    var ty2=this.y-(this.l+this.h)/25;
    var tx3=this.x;
    var ty3=this.y+(this.l+this.h)/15;
    //num1
    if (this.num===1){
        //num1 and color1 RED
        if(this.color===1){
            stroke(255, 0, 0);
            fill(255, 0, 0);
            //num1 and color1 RED and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num1 and color1 RED and pattern1 BLANK and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color1 RED and pattern1 BLANK and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color1 RED and pattern1 BLANK and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num1 and color1 RED and pattern2 FILL
            else if(this.pattern===2){
                /*num1 and color1 RED and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color1 RED and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color1 RED and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num1 and color1 RED and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x,this.y,ellipseLength/5,
                ellipseLength/5);
                noFill();
                /*num1 and color1 RED and pattern3 DOT and                    shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color1 RED and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color1 RED and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
        }
        //num1 and color2 GREEN
        else if(this.color===2){
            stroke(10, 194, 59);
            fill(10, 194, 59);
            //num1 and color2 GREEN and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num1 and color2 GREEN and pattern1 BLANK and                  shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color2 GREEN and pattern1 BLANK and                  shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color2 GREEN and pattern1 BLANK and                  shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num1 and color2 GREEN and pattern2 FILL
            else if(this.pattern===2){
                /*num1 and color2 GREEN and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color2 GREEN and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color2 GREEN and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num1 and color2 GREEN and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x,this.y,ellipseLength/5,
                ellipseLength/5);
                noFill();
                /*num1 and color2 GREEN and pattern3 DOT and                   shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color2 GREEN and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color2 GREEN and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }

        }
        //num1 and color3 PURPLE
        else if(this.color===3){
            stroke(185, 11, 194);
            fill(185, 11, 194);
            //num1 and color3 PURPLE and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num1 and color3 PURPLE and pattern1 BLANK and                  shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color3 PURPLE and pattern1 BLANK and                  shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color3 PURPLE and pattern1 BLANK and                  shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num1 and color3 PURPLE and pattern2 FILL
            else if(this.pattern===2){
                /*num1 and color3 PURPLE and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color3 PURPLE and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color3 PURPLE and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num1 and color3 PURPLE and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x,this.y,ellipseLength/5,
                ellipseLength/5);
                noFill();
                /*num1 and color3 PURPLE and pattern3 DOT and                   shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x,this.y,ellipseLength,                           ellipseWidth);
                }
                /*num1 and color3 PURPLE and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x,this.y,rectLength, rectWidth); 
                }
                /*num1 and color3 PURPLE and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }

        }
    }
    //num2
    else if (this.num===2){
        //num2 and color1 RED
        if(this.color===1){
            stroke(255, 0, 0);
            fill(255, 0, 0);
            //num2 and color1 RED and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num2 and color1 RED and pattern1 BLANK and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color1 RED and pattern1 BLANK and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth);
                }
                /*num2 and color1 RED and pattern1 BLANK and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
            //num2 and color1 RED and pattern2 FILL
            else if(this.pattern===2){
                /*num2 and color1 RED and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color1 RED and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth);
                }
                /*num2 and color1 RED and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
            //num2 and color1 RED and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x+ellipseLength,this.y,
                    ellipseLength/5,ellipseLength/5);
                ellipse(this.x-ellipseLength,this.y,
                    ellipseLength/5,ellipseLength/5);
                noFill();
                /*num2 and color1 RED and pattern3 DOT and                    shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color1 RED and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth);
                }
                /*num2 and color1 RED and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
        }
        //num2 and color2 GREEN
        else if(this.color===2){
            stroke(10, 194, 59);
            fill(10, 194, 59);
            //num2 and color2 GREEN and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num2 and color2 GREEN and pattern1 BLANK and                  shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color2 GREEN and pattern1 BLANK and                  shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth); 
                }
                /*num2 and color2 GREEN and pattern1 BLANK and                  shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
            //num2 and color2 GREEN and pattern2 FILL
            else if(this.pattern===2){
                /*num2 and color2 GREEN and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color2 GREEN and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth); 
                }
                /*num2 and color2 GREEN and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
            //num2 and color2 GREEN and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x+ellipseLength,this.y,
                    ellipseLength/5,ellipseLength/5);
                ellipse(this.x-ellipseLength,this.y,
                    ellipseLength/5,ellipseLength/5);
                noFill();
                /*num2 and color2 GREEN and pattern3 DOT and                   shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color2 GREEN and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth); 
                }
                /*num2 and color2 GREEN and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }

        }
        //num2 and color3 PURPLE
        else if(this.color===3){
            stroke(185, 11, 194);
            fill(185, 11, 194);
            //num2 and color3 PURPLE and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num2 and color3 PURPLE and pattern1 BLANK and                  shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color3 PURPLE and pattern1 BLANK and                  shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth); 
                }
                /*num2 and color3 PURPLE and pattern1 BLANK and                  shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
            //num2 and color3 PURPLE and pattern2 FILL
            else if(this.pattern===2){
                /*num2 and color3 PURPLE and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color3 PURPLE and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth); 
                }
                /*num2 and color3 PURPLE and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }
            //num2 and color3 PURPLE and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x+ellipseLength,this.y,
                    ellipseLength/5,ellipseLength/5);
                ellipse(this.x-ellipseLength,this.y,
                    ellipseLength/5,ellipseLength/5);
                noFill();
                /*num2 and color3 PURPLE and pattern3 DOT and                   shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength,this.y,                               ellipseLength,ellipseWidth);
                }
                /*num2 and color3 PURPLE and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength,this.y,rectLength,                          rectWidth);
                    rect(this.x-rectLength,this.y,rectLength,                          rectWidth);
                }
                /*num2 and color3 PURPLE and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength,ty1,tx2+rectLength                         ,ty2,tx3+rectLength,ty3);
                    triangle(tx1-rectLength,ty1,tx2-rectLength                         ,ty2,tx3-rectLength,ty3);
                }  
            }

        }
    }
    //num3
    else if (this.num===3){
        //num3 and color1 RED
        if(this.color===1){
            stroke(255, 0, 0);
            fill(255, 0, 0);
            //num3 and color1 RED and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num3 and color1 RED and pattern1 BLANK and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color1 RED and pattern1 BLANK and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color1 RED and pattern1 BLANK and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num3 and color1 RED and pattern2 FILL
            else if(this.pattern===2){
                /*num3 and color1 RED and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color1 RED and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color1 RED and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num3 and color1 RED and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x+ellipseLength*1.5,this.y,
                        ellipseLength/5,ellipseLength/5);
                ellipse(this.x-ellipseLength*1.5,this.y,
                        ellipseLength/5,ellipseLength/5);
                ellipse(this.x,this.y,ellipseLength/5,
                        ellipseLength/5);
                noFill();
                /*num3 and color1 RED and pattern3 DOT and                    shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color1 RED and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color1 RED and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
        }
        //num3 and color2 GREEN
        else if(this.color===2){
            stroke(10, 194, 59);
            fill(10, 194, 59);
            //num3 and color2 GREEN and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num3 and color2 GREEN and pattern1 BLANK and                  shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color2 GREEN and pattern1 BLANK and                  shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color2 GREEN and pattern1 BLANK and                  shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num3 and color2 GREEN and pattern2 FILL
            else if(this.pattern===2){
                /*num3 and color2 GREEN and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color2 GREEN and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color2 GREEN and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num3 and color2 GREEN and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x+ellipseLength*1.5,this.y,
                        ellipseLength/5,ellipseLength/5);
                ellipse(this.x-ellipseLength*1.5,this.y,
                        ellipseLength/5,ellipseLength/5);
                ellipse(this.x,this.y,ellipseLength/5,
                        ellipseLength/5);
                noFill();
                /*num3 and color2 GREEN and pattern3 DOT and                   shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color2 GREEN and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color2 GREEN and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }

        }
        //num3 and color3 PURPLE
        else if(this.color===3){
            stroke(185, 11, 194);
            fill(185, 11, 194);
            //num3 and color3 PURPLE and pattern1 BLANK
            if(this.pattern===1){
                noFill();
                /*num3 and color3 PURPLE and pattern1 BLANK and                  shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color3 PURPLE and pattern1 BLANK and                  shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color3 PURPLE and pattern1 BLANK and                  shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num3 and color3 PURPLE and pattern2 FILL
            else if(this.pattern===2){
                /*num3 and color3 PURPLE and pattern2 FILL and                    shape1 CIRLCE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color3 PURPLE and pattern2 FILL and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color3 PURPLE and pattern2 FILL and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }
            //num3 and color3 PURPLE and pattern3 DOT
            else if(this.pattern===3){
                ellipse(this.x+ellipseLength*1.5,this.y,
                        ellipseLength/5,ellipseLength/5);
                ellipse(this.x-ellipseLength*1.5,this.y,
                        ellipseLength/5,ellipseLength/5);
                ellipse(this.x,this.y,ellipseLength/5,
                        ellipseLength/5);
                noFill();
                /*num3 and color3 PURPLE and pattern3 DOT and                   shape1 CIRCLE*/
                if(this.shape===1){
                    ellipse(this.x+ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x-ellipseLength*1.5,this.y,                               ellipseLength,ellipseWidth);
                    ellipse(this.x,this.y,ellipseLength,                                   ellipseWidth);
                }
                /*num3 and color3 PURPLE and pattern3 DOT and                    shape2 SQUARE*/
                else if(this.shape===2){
                    rect(this.x+rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x-rectLength*1.5,this.y,
                        rectLength,rectWidth);
                    rect(this.x,this.y,rectLength,rectWidth);
                }
                /*num3 and color3 PURPLE and pattern3 DOT and                    shape3 TRIANGLE*/
                else if(this.shape===3){
                    triangle(tx1+rectLength*1.5,ty1,tx2                                    +rectLength*1.5,ty2,tx3+rectLength                             *1.5,ty3);
                    triangle(tx1-rectLength*1.5,ty1,tx2                                    -rectLength*1.5,ty2,tx3-rectLength                             *1.5,ty3);
                    triangle(tx1,ty1,tx2,ty2,tx3,ty3);
                }  
            }

        }
    }
};

var button1 = {
    x:360,
    y:21,
    l:60,
    w:32,
    txt:"SHUFFLE"
};

var drawButtons=function(button){
    stroke(0, 0, 0);
    fill(136,116,247);
    rect(button.x, button.y, button.l, button.w);
    fill(0, 0, 0);
    textAlign(CENTER, CENTER);
    text(button.txt,button.x, button.y);
};

drawButtons(button1);

var isMouseInside = function(button){
    return (mouseX>=(button.x - button.l/2) &&
            mouseX<=(button.x + button.l/2) &&
            mouseY>=(button.y - button.w/2) &&
            mouseY<=(button.y + button.w/2));
};

//display 12 cards
for (var m=1; m<=12; m++){
    var cardDisplay=m;
    selected[m-1].draw();
}

textAlign(CENTER, CENTER);
fill(0, 0, 0);
text("SETS",365,180);
var sets=0;

//the selected cards' position numbers
var choice=[];

//white box
noStroke();
fill(255, 255, 255);
rect(200,350,width,60);

//can only select 3 cards
//is it a SET? count sets
var mouseClicked=function(){
    
    //white box
    noStroke();
    fill(255, 255, 255);
    rect(200,350,width,60);
    //replace last 3 cards with new cards and send the other 3 to the back of the selected array
    if (isMouseInside(button1)) {
        selected.push(selected[9]);
        selected.splice(9,1);
        selected.push(selected[9]);
        selected.splice(9,1);
        selected.push(selected[9]);
        selected.splice(9,1);
        
        fill(255, 255, 255);
        stroke(255, 255, 255);
        rect(55, 280, 100, 70);
        rect(165, 280, 100, 70);
        rect(275, 280, 100, 70);
        
        cardDisplay=10;
        selected[9].draw();
        cardDisplay=11;
        selected[10].draw();
        cardDisplay=12;
        selected[11].draw();
    }
    noFill();
    if (choice.length<3){
        if (mouseX>=(55-50) && mouseX<= (55+50) &&
        mouseY>= (40-35) && mouseY<= (40+35) && choice[0]!==1           && choice[1]!==1)     {
            stroke(255, 240, 69);
            rect(55,40,100,70);
            choice.push(1);
        }
        else if (mouseX>=(165-50) && mouseX<= (165+50) &&
        mouseY>= (40-35) && mouseY<= (40+35) && choice[0]!==2           && choice[1]!==2)     {
            stroke(255, 240, 69);
            rect(165,40,100,70);
            choice.push(2);
        }
        else if (mouseX>=(275-50) && mouseX<= (275+50) &&
            mouseY>= (40-35) && mouseY<= (40+35) && 
            choice[0]!==3 && choice[1]!==3)     {
            stroke(255, 240, 69);
            rect(275,40,100,70);
            choice.push(3);
        }
        else if (mouseX>=(55-50) && mouseX<= (55+50) &&
            mouseY>= (120-35) && mouseY<= (120+35) && 
            choice[0]!==4 && choice[1]!==4) {
            stroke(255, 240, 69);
            rect(55,120,100,70);
            choice.push(4);
        }
        else if (mouseX>=(165-50) && mouseX<= (165+50) &&
            mouseY>= (120-35) && mouseY<= (120+35) && 
            choice[0]!==5 && choice[1]!==5) {
            stroke(255, 240, 69);
            rect(165,120,100,70);
            choice.push(5);
        }
        else if (mouseX>=(275-50) && mouseX<= (275+50) &&
            mouseY>= (120-35) && mouseY<= (120+35) && 
            choice[0]!==6 && choice[1]!==6) {
            stroke(255, 240, 69);
            rect(275,120,100,70);
            choice.push(6);
        }
        else if (mouseX>=(55-50) && mouseX<= (55+50) &&
            mouseY>= (200-35) && mouseY<= (200+35) && 
            choice[0]!==7 && choice[1]!==7) {
            stroke(255, 240, 69);
            rect(55,200,100,70);
            choice.push(7);
        }
        else if (mouseX>=(165-50) && mouseX<= (165+50) &&
            mouseY>= (200-35) && mouseY<= (200+35) && 
            choice[0]!==8 && choice[1]!==8) {
            stroke(255, 240, 69);
            rect(165,200,100,70);
            choice.push(8);
        }
        else if (mouseX>=(275-50) && mouseX<= (275+50) &&
            mouseY>= (200-35) && mouseY<= (200+35) && 
            choice[0]!==9 && choice[1]!==9) {
            stroke(255, 240, 69);
            rect(275,200,100,70);
            choice.push(9);
        }
        else if (mouseX>=(55-50) && mouseX<= (55+50) &&
            mouseY>= (280-35) && mouseY<= (280+35) && 
            choice[0]!==10 && choice[1]!==10) {
            stroke(255, 240, 69);
            rect(55,280,100,70);
            choice.push(10);
        }
        else if (mouseX>=(165-50) && mouseX<= (165+50) &&
            mouseY>= (280-35) && mouseY<= (280+35) && 
            choice[0]!==11 && choice[1]!==11) {
            stroke(255, 240, 69);
            rect(165,280,100,70);
            choice.push(11);
        }
        else if (mouseX>=(275-50) && mouseX<= (275+50) &&
            mouseY>= (280-35) && mouseY<= (280+35) && 
            choice[0]!==12 && choice[1]!==12) {
            stroke(255, 240, 69);
            rect(275,280,100,70);
            choice.push(12);
        }
    }

    //variables of the selected cards
    var xA=selected[choice[0]-1].x;
    var xB=selected[choice[1]-1].x;
    var xC=selected[choice[2]-1].x;
    var yA=selected[choice[0]-1].y;
    var yB=selected[choice[1]-1].y;
    var yC=selected[choice[2]-1].y;
    var lA=selected[choice[0]-1].l;
    var lB=selected[choice[1]-1].l;
    var lC=selected[choice[2]-1].l;
    var hA=selected[choice[0]-1].h;
    var hB=selected[choice[1]-1].h;
    var hC=selected[choice[2]-1].h;
    var numA=selected[choice[0]-1].num;
    var numB=selected[choice[1]-1].num;
    var numC=selected[choice[2]-1].num;
    var shapeA=selected[choice[0]-1].shape;
    var shapeB=selected[choice[1]-1].shape;
    var shapeC=selected[choice[2]-1].shape;
    var colorA=selected[choice[0]-1].color;
    var colorB=selected[choice[1]-1].color;
    var colorC=selected[choice[2]-1].color;
    var patternA=selected[choice[0]-1].pattern;
    var patternB=selected[choice[1]-1].pattern;
    var patternC=selected[choice[2]-1].pattern;
    
    var isSet=false;
    
    if ((numA===numB && numB===numC) || (numA!==numB && 
    numB!==numC && numA!==numC)){
        if ((shapeA===shapeB && shapeB===shapeC) || 
        (shapeA!==shapeB && shapeB!==shapeC && shapeA!==shapeC          )) {
            if ((colorA===colorB && colorB===colorC) || 
            (colorA!==colorB && colorB!==colorC && 
            colorA!==colorC)){
                if ((patternA===patternB && patternB===patternC)                 || (patternA!==patternB && patternB!==patternC                  && patternA!==patternC)){
                    isSet=true;
                    fill(0, 0, 0);
                    text("SET!",200,350);
                }
                else {
                    //red box
                    noStroke();
                    fill(255, 0, 0);
                    rect(200,350,width,60);
                    fill(0, 0, 0);
                    text("NOT A SET",200,350);
                }
            }
            else {
                //red box
                noStroke();
                fill(255, 0, 0);
                rect(200,350,width,60);
                fill(0, 0, 0);
                text("NOT A SET",200,350);
            }
        }
        else {
            //red box
            noStroke();
            fill(255, 0, 0);
            rect(200,350,width,60);
            fill(0, 0, 0);
            text("NOT A SET",200,350);
        }
    }
    else {
        //red box
        noStroke();
        fill(255, 0, 0);
        rect(200,350,width,60);
        fill(0, 0, 0);
        text("NOT A SET",200,350);
    }
    //what happens if it is a SET
    if (isSet) {
        sets++;
        noStroke();
        fill(255, 255, 0);
        rect(365,200,50,10);
        fill(0, 0, 0);
        text(sets,365,200);
        fill(255, 255, 255);
        stroke(255, 255, 255);
        rect(xA,yA,lA,hA);
        rect(xB,yB,lB,hB);
        rect(xC,yC,lC,hC);
        //take away set
        selected.splice((choice[0]-1),1);
        if (choice[0]<choice[1] && choice[0]<choice[2]) {
            selected.splice((choice[1]-2),1); 
            if (choice[1]<choice[2]) {
                selected.splice((choice[2]-3),1);
                selected.splice((choice[0]-1),0,selected[9]);
                selected.splice((9+1),1);
                selected.splice((choice[1]-1),0,selected[9+1]);
                selected.splice((9+2),1);
                selected.splice((choice[2]-1),0,selected[9+2]                 );
                selected.splice((9+3),1);
            }
            else if (choice[2]<choice[1]) {
                selected.splice((choice[2]-2),1);
                selected.splice((choice[0]-1),0,selected[9]);
                selected.splice((9+1),1);
                selected.splice((choice[1]-2),0,selected[9+1]);
                selected.splice((9+2),1);
                selected.splice((choice[2]-1),0,selected[9+2]);
                selected.splice((9+3),1);
            }
        }
        else if (choice[1]<choice[0] && choice[1]<choice[2]) {
            selected.splice((choice[1]-1),1);
            if (choice[2]<choice[0]) {
                selected.splice((choice[2]-2),1);
                selected.splice((choice[0]-3),0,selected[9]);
                selected.splice((9+1),1);
                selected.splice((choice[1]-1),0,selected[9+1]);
                selected.splice((9+2),1);
                selected.splice((choice[2]-1),0,selected[9+2]);
                selected.splice((9+3),1);
            }
            else if (choice[0]<choice[2]) {
                selected.splice((choice[2]-3),1);
                selected.splice((choice[0]-2),0,selected[9]);
                selected.splice((9+1),1);
                selected.splice((choice[1]-1),0,selected[9+1]);
                selected.splice((9+2),1);
                selected.splice((choice[2]-1),0,selected[9+2]);
                selected.splice((9+3),1);
            }
        }
        else if (choice[2]<choice[0] && choice[0]<choice[1]) {
            selected.splice((choice[1]-2),1);
            selected.splice((choice[2]-1),1);
            selected.splice((choice[0]-2),0,selected[9]);
            selected.splice((9+1),1);
            selected.splice((choice[1]-2),0,selected[9+1]);
            selected.splice((9+2),1);
            selected.splice((choice[2]-1),0,selected[9+2]);
            selected.splice((9+3),1);
        }
        else if (choice[2]<choice[1] && choice[1]<choice[0]) {
            selected.splice((choice[1]-1),1);
            selected.splice((choice[2]-1),1);
            selected.splice((choice[0]-3),0,selected[9]);
            selected.splice((9+1),1);
            selected.splice((choice[1]-2),0,selected[9+1]);
            selected.splice((9+2),1);
            selected.splice((choice[2]-1),0,selected[9+2]);
            selected.splice((9+3),1);
        }
        //draw new cards
        cardDisplay=choice[0];
        selected[choice[0]-1].draw();
        cardDisplay=choice[1];
        selected[choice[1]-1].draw();
        cardDisplay=choice[2];
        selected[choice[2]-1].draw();
        
        //repick
        choice.splice(0,3);
    }
    else {
        noFill();
        stroke(0, 0, 0);
        rect(xA,yA,lA,hA);
        rect(xB,yB,lB,hB);
        rect(xC,yC,lC,hC);
        choice.splice(0,3);
    }
};









